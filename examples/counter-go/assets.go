// Code generated by go-bindata.
// sources:
// js/picodom/app.js
// js/picodom/vendor/picodom.js
// js/styles.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsPicodomAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\x41\x6a\x44\x21\x0c\x86\xd7\x93\x53\x64\xa7\x01\x11\xba\xad\xbc\x03\xcc\x01\x7a\x00\x1b\x2d\x4a\x6d\x1c\x44\xdf\xe6\xe1\xdd\x8b\xd3\x19\xfa\x18\x57\xf2\x27\xf9\xf2\x65\xf7\x0d\x13\x6e\x78\xcb\x5c\x43\xfd\xb1\x09\xe0\x6b\x08\xf7\x5c\x05\x3f\xae\x9a\x09\x0f\xb8\xb4\xd8\x47\x13\x4c\x5a\x85\xbc\x2b\x83\x32\x4a\x31\x70\x59\xef\x25\x44\xb6\xc1\x77\x6f\x77\x5f\x46\xa4\x53\xcf\xe7\xe8\xbd\x8a\x32\x78\x54\xe1\x92\xf9\xfb\x1d\x9f\x7b\x34\x1d\x6c\x7d\x08\xfa\x8d\xe6\x34\xa8\xae\xc2\x4d\x11\x39\x98\x00\x4b\x4f\x6a\x88\xee\xdf\xaa\x45\x09\xb1\xe9\xbb\xd8\x2a\x9d\xe4\x6f\xbe\x73\xd2\x2b\x34\xf7\xa9\x6d\x5d\x50\x87\xf4\xd8\x88\x60\xc2\xe3\x6f\xff\x10\xb8\x3d\x58\x0e\x9e\x4c\x07\xbf\x01\x00\x00\xff\xff\x2d\x62\xcf\xeb\x10\x01\x00\x00")

func jsPicodomAppJsBytes() ([]byte, error) {
	return bindataRead(
		_jsPicodomAppJs,
		"js/picodom/app.js",
	)
}

func jsPicodomAppJs() (*asset, error) {
	bytes, err := jsPicodomAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/picodom/app.js", size: 272, mode: os.FileMode(436), modTime: time.Unix(1509532064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsPicodomVendorPicodomJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x56\x4b\xaf\xa3\xb8\x12\xde\xdf\x5f\x91\x70\x25\xcb\x56\xdc\x9c\x74\xdf\x1d\x74\xdd\xe8\xf4\x68\x76\x33\xbd\x98\xd7\xc6\x62\x41\xa0\x48\xe8\x24\x65\x64\x4c\x72\x50\xe0\xbf\x8f\x8c\x79\xa4\x4f\xa6\x67\x65\x70\xbd\xbf\xfa\xaa\x60\x5d\x34\x94\xd9\x52\x13\x47\x69\xc4\x3d\xd0\xfb\x6f\x98\xd9\x00\xc0\xb6\x15\xea\x62\x85\x6f\x95\x36\xb6\x66\x2c\x68\x28\xc7\xa2\x24\xcc\x83\xf5\x24\xbc\xe8\xbc\x39\xe3\xce\xf0\x51\x4b\x44\xc1\xe4\x6e\xf1\xe0\xad\x18\xf3\x67\x98\x5e\xf2\x9d\x7f\xe4\x2a\x18\xed\x82\x44\x1a\x11\x19\x8e\x61\x55\x66\x3a\xd7\x17\xb8\xf7\xa2\xe7\xf6\x58\xd6\x72\xc9\x4f\xdc\x83\xa6\xc6\x55\x6d\x4d\x99\xd9\x20\x9e\x04\x2b\xe3\x53\xbf\xa6\x66\x45\xd2\x82\x4a\xe2\x42\x1b\x5e\x43\x6a\x0e\xcd\x05\xc9\xd6\xe1\x19\xe9\x60\x8f\x71\xfd\xe1\xc3\xea\xff\x9f\x62\x91\x85\x55\x53\x1f\xf9\x2c\x57\x75\x22\x06\x9b\x38\x9b\x54\x45\x59\xf0\x57\x63\xd2\x36\x2c\xeb\xe1\xe4\x04\x59\x58\xe9\x8a\x0b\x21\xbc\x7b\x7a\x70\x3b\xfb\xa4\xc1\x17\x9e\x6b\x5c\x51\x73\x3e\xaf\x81\x18\x5b\x6f\xd7\x30\x9c\x1f\xfd\x69\xbd\x6a\x40\xcd\x65\x8f\x66\x01\x8a\x76\xb4\x81\x20\x88\x48\xc4\x06\x6d\x63\x28\x70\xa5\xd2\xe1\xa1\x19\xbb\xbb\x7b\x8a\x50\x56\x46\x57\x75\x64\xba\xee\xde\xcb\xec\x58\x9e\x73\x83\x14\xd9\x3e\x42\xee\xef\xac\xe8\x67\x7c\x86\xd6\x4a\x92\x56\xdc\x5d\xe6\x0e\x27\x0d\x67\x4e\x5d\xc7\x09\x72\x9d\x0d\x20\x84\x7b\x9d\xb7\x42\x52\x38\x79\x53\xdb\x44\x3a\x5c\x63\x0b\xa9\x2f\x3c\x16\x96\x4f\xa9\xad\xf4\xe2\xdf\x3e\xe0\x0f\xf7\x3e\x9e\x82\xd8\x55\x49\x2b\x14\xa4\x6c\x02\xa8\x6c\xf2\xbd\xc0\x78\x81\x71\x82\xd1\x27\x2d\x3e\xb5\xf7\x59\x16\xfc\x19\x04\xe1\x23\xcd\x99\x67\x06\x53\x8b\x7f\xe0\x9b\xfd\xaa\x73\xe4\xe8\xf1\x1f\xf3\xe1\x06\x4c\xd7\x05\xf5\xd5\x79\x00\x0c\x9d\x13\xb1\x7b\x67\xfb\xf3\x19\xdd\xdb\xd7\xdf\x79\x70\xb4\xb6\x8a\x5e\x5e\x6e\xb7\x5b\x78\xfb\x5f\xa8\xcd\xe1\xe5\xd3\x76\xbb\x7d\x71\xf6\x72\xb4\x8e\xfe\xd9\x9a\x8f\xe2\x18\xc3\xa1\x3b\x8c\x8d\x0f\xa1\x26\xaf\xc8\x58\xea\x5b\x3f\x73\x5a\xdc\xdf\xeb\x70\x12\xbd\x58\x90\x82\x6d\x6c\x3f\xe3\xdc\x94\x89\x72\x76\xb3\x11\x14\xa6\x55\x85\x94\xff\xe4\x64\x5c\xf3\x45\x4b\x59\x37\x4f\xe2\x5d\x23\x7c\x20\x51\x71\x92\x56\x8e\x6f\xca\x26\xa2\x7f\x46\xbf\x1a\x19\xa3\x7d\x07\x4e\xd8\x3a\xf0\xcc\x48\x6c\xdf\x94\xf6\x8c\xfe\x72\x8a\x62\x5c\x14\xcb\xb5\x24\x20\xc7\x41\x21\x30\x1c\xd4\x94\x49\x80\x94\x49\xba\x2e\x08\x7c\x6b\xac\x69\xef\xfe\xba\xcf\x52\x9b\x1d\xdd\x6c\xf7\xcb\xea\x98\xf7\x0b\x31\xc6\x69\x87\x61\x8d\xf6\xd5\x5a\x53\xee\x1b\x8b\xdc\x48\x12\x11\x86\x06\x2f\xfa\x8a\x0f\xd7\x42\xf4\x4b\x05\xa5\xaf\xe0\x81\xf1\x3e\x3b\x77\xe7\xa9\x5a\x02\x29\x9d\xc8\x02\x82\x6b\x7a\x6e\x86\x5a\x74\xd7\x05\xd9\x11\xb3\x13\xe6\xc3\xeb\x0e\x95\x4e\x22\xa3\x74\x12\x97\x6b\x80\x82\xb1\xf1\x70\xf8\x68\x59\xca\x42\xf4\xc4\x18\x85\x9a\x9a\x2a\xff\x41\x83\x17\xe9\x40\xe9\xfe\x61\x30\x8b\x39\xc9\x65\x94\x1c\x23\x7c\x69\xbe\xaf\x66\x0e\xe1\x6f\x19\x7b\x5e\xb1\x9c\x60\x51\x70\x40\xec\x88\x5b\x11\x59\xfe\x10\xab\x71\x18\x97\x05\xc7\x99\x96\x62\xec\xfb\xc4\xc0\x13\xb6\x8b\xfa\x79\xda\x19\xb2\x92\xf5\x60\xe8\xd6\x19\x00\x09\x03\x18\x96\x54\xa3\xb1\x5f\xb0\xd0\x06\xb9\xe6\x56\x56\x42\x3e\xb0\xc3\x6f\x3e\x3b\x8c\x83\x5b\x77\xee\x04\x00\xf2\xf3\x71\x2f\x5d\x17\x7c\x50\x69\xc7\x5c\x64\x05\xd5\x32\xa6\xde\x64\xe6\x6f\x06\xf6\xfd\x04\xc8\x14\xe8\xe9\x2e\x87\x7b\x2f\x8f\xa0\x12\x79\x75\x4f\x2d\x6c\xe3\xf6\x73\x1a\xb7\x9b\x8d\x6f\xf9\x01\x8e\xaa\x4d\xc0\x78\x43\xb7\x2c\x6a\xd5\x26\xf2\xf2\xe0\xca\xbd\xef\xa1\xe1\x17\x11\xfb\x2a\xf6\x8c\xf1\x5c\xed\x13\x50\x07\x79\x49\x44\x3f\xe5\xd4\xc2\x56\x9e\x60\x1b\x9f\x3e\x67\xf1\xa3\xf7\x27\x6f\xb7\x87\xe4\xd5\x69\xf6\x5e\x16\xfc\xaa\xf6\x89\x68\x37\x9b\x65\x5d\xbd\x41\xc3\x6f\x42\xbe\x42\xae\xde\x92\xae\x53\x49\xec\x51\x7f\xdb\x8d\xf0\xbb\x6c\xce\xdc\xc8\x83\xbc\xc8\x9b\x43\xfd\xb4\xd9\x08\xe9\x0a\x8c\xf8\x1e\x06\x45\x27\x7e\x75\xcb\xfb\x55\x7d\x4c\xbc\xd2\x20\x77\x77\x3b\x6e\xbe\xef\xdd\xa0\x78\x10\xf2\xd9\x48\x44\x3e\x8e\x8b\x3b\x87\x92\x57\xf5\x96\xc0\xcd\x0d\x9a\xfb\x5a\x3a\x70\x7d\xed\xff\x02\xe1\x90\x74\xc1\x8d\xf4\xe8\x4c\xfd\x6e\x37\x9b\x05\x4b\x37\x9b\xb9\xf7\xe4\x6a\x6f\x13\xf9\x05\x5c\x26\xf1\x55\x7d\x59\xd8\x99\x74\x5d\x31\xe5\x39\x5e\x8b\xbe\x1f\x48\x67\x18\xb3\x6b\x00\x13\x92\xce\xf1\x2f\x37\xcf\x8c\x3d\x7f\x39\x2c\x63\x4f\x77\xb4\x7b\x30\x02\x1b\xf1\x1f\xf1\xbb\x06\x23\xa4\x9b\xd8\x7a\x22\xaf\x10\xf3\xd7\xd0\xf4\x2e\xf7\x5a\x66\x8e\x7c\xa9\xfb\x05\xc1\xf0\x08\xc6\xad\x59\xb7\xdf\x80\x7a\x11\xff\xe7\xe5\xe5\xbf\xab\x5a\x37\x26\xc3\x5f\xd3\xaa\x2a\xe9\xf0\xe7\x6f\xbf\xc0\xf8\xc3\x13\x7e\xab\xc3\x4b\x5a\xfd\x1d\x00\x00\xff\xff\x37\x81\xec\x60\x8e\x09\x00\x00")

func jsPicodomVendorPicodomJsBytes() ([]byte, error) {
	return bindataRead(
		_jsPicodomVendorPicodomJs,
		"js/picodom/vendor/picodom.js",
	)
}

func jsPicodomVendorPicodomJs() (*asset, error) {
	bytes, err := jsPicodomVendorPicodomJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/picodom/vendor/picodom.js", size: 2446, mode: os.FileMode(436), modTime: time.Unix(1509531676, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsStylesCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x41\xca\x83\x30\x10\x05\xe0\x75\xe6\x14\x03\xf2\x6f\x7e\x0c\x68\x5b\x0a\x4d\x4e\x93\x98\x18\x43\x35\x23\x69\x04\xdb\xe2\xdd\x4b\x22\x95\xce\xee\xbd\x79\x7c\xff\xf8\x06\x36\xa9\xe8\x7c\x10\xd8\x48\x60\xb3\x32\xc6\x07\xb7\x07\x4d\x2b\x7f\xf8\x57\xc9\x9a\xa2\xb1\x91\x6b\x5a\x25\x6c\x00\x9a\xcc\xb3\xc6\x21\x4d\x63\x8d\x95\x9a\xe7\xe2\xf8\xc0\x07\xeb\xdd\x90\x04\xb6\x4d\xf3\x77\x0c\xf3\xf3\x80\x4f\x76\x92\xc0\x7a\x0a\x29\xdb\x56\xe0\xa5\x14\x5a\x75\x77\x17\x69\x09\x86\x77\x34\x52\x14\x58\xd9\x5b\x6b\xaf\x67\x09\xec\x5b\xf4\xe5\x76\x76\x49\x89\x42\x86\x7f\xa4\x36\x4b\x1b\x7c\x02\x00\x00\xff\xff\x0b\x69\x24\xff\xd5\x00\x00\x00")

func jsStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_jsStylesCss,
		"js/styles.css",
	)
}

func jsStylesCss() (*asset, error) {
	bytes, err := jsStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/styles.css", size: 213, mode: os.FileMode(436), modTime: time.Unix(1509531250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/picodom/app.js": jsPicodomAppJs,
	"js/picodom/vendor/picodom.js": jsPicodomVendorPicodomJs,
	"js/styles.css": jsStylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"picodom": &bintree{nil, map[string]*bintree{
			"app.js": &bintree{jsPicodomAppJs, map[string]*bintree{}},
			"vendor": &bintree{nil, map[string]*bintree{
				"picodom.js": &bintree{jsPicodomVendorPicodomJs, map[string]*bintree{}},
			}},
		}},
		"styles.css": &bintree{jsStylesCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

